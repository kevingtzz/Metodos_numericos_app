//Autor Santiago Albisser
//Metodo trazadores Cubicos

Leer  X,Y

len = 4*(Longitud(X)-1)

b = nuevo arreglo(len)

A[0][0] = Math.pow(X[0], 3)
A[0][1] = Math.pow(X[0], 2)
A[0][2] = X[0]
A[0][3] = 1
b[0] = Y[0]
let aux = 0
let auxilio = 0

Mientras que (i<Longitud(X))
    Mientras que(j<Longitud(A))
        Si(((i * 4) - 4) == j)
            A[i][j] = Math.pow(X[i], 3)
        fin si
    fin mientras que
    Mientras que (j<Longitud(A))
        Si(((i * 4) - 3) == j)
            A[i][j] = Math.pow(X[i], 2)
        fin si
    fin mientras que
    Mientras que (j<Longitud(A))
        Si(((i * 4) - 2) == j)
            A[i][j] = X[i]
        fin si
    fin mientras que
    Mientras que (j<Longitud(A))
        Si (((i * 4) - 1) == j)
            A[i][j] = 1
        fin si
    fin mientras que
    b[i] = Y[i]
    auxilio = i
fin mientras que 
aux = auxilio
mientras que (i < (len/2))
    mientras que (j<len)
        Si (((4 * i) - (4 * (aux + 1))) == j)
            A[i][j] = Math.pow(X[i - aux],3)
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 1) == j)
            A[i][j] = Math.pow(X[i - aux],2)
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 2) == j)
            A[i][j] = X[i - aux]
        fin si 
        Si (((4 * i) - (4 * (aux + 1)) + 3) == j)
            A[i][j] = 1
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 4) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -Math.pow(X[i - aux],3)
            Si no
                A[i][j] = Math.pow(X[i - aux],3)
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 5) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -Math.pow(X[i - aux],2)
            Si no
                A[i][j] = Math.pow(X[i - aux],2)
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 6) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -X[i - aux]
            Si no
                A[i][j] = X[i - aux]
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 7) == j)
            A[i][j] = -1
        fin si
    fin mientras que
    auxilio = i
fin mientras que 
aux = auxilio
Mientras que (i < ((3 * Longitud(X)))
    Mientras que (j<len)
        Si (((4 * i) - (4 * (aux + 1))) == j)
            A[i][j] = 3 * Math.pow(X[i - aux],2)
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 1) == j)
            A[i][j] = 2 * X[i - aux]
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 2) == j)
            A[i][j] = 1
        fin si
        Si f(((4 * i) - (4 * (aux + 1)) + 4) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -3 * Math.pow(X[i - aux],2)
            Si no 
                A[i][j] = 3 * Math.pow(X[i - aux],2)
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 5) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -2 * X[i - aux]
            Si no
                A[i][j] = 2 * X[i - aux]
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 6) == j)
            A[i][j] = -1
        fin si
    fin mientras que
    auxilio = i
fin mientras que
aux = auxilio
Mientras que (i < len-2 )
    Mientras que (j<Len)
        Si (((4 * i) - (4 * (aux + 1))) == j)
            A[i][j] = 6 * X[i - aux]
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 1) == j)
            A[i][j] = 2
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 4) == j)
            Si (X[i - aux] != 0)
                A[i][j] = -6 * X[i - aux]
            fin si
        fin si
        Si (((4 * i) - (4 * (aux + 1)) + 5) == j)
            A[i][j] = -2
        fin si
    fin mientras que
    auxilio = i
fin mientras que
aux = auxilio
Mientras que (i<len -1)
    A[i][0] = 6 * X[0]
    A[i][1] = 2
    auxilio = i
fin mientras que
aux = auxilio
Mientras que (i<len)
    A[i][len - 4] = 6 * X[X.length - 1]
    A[i][len - 3] = 2
fin mientras que
x= solve(A, b)
Imprimir Trazadores cubicos
Imprimir Coeficientes de los trazadores
Imprimir Trazadores
